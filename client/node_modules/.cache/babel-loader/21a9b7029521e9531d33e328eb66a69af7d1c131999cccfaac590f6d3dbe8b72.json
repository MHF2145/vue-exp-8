{"ast":null,"code":"export default {\n  name: 'AddFavoriteTrainer',\n  props: {\n    isVisible: Boolean\n  },\n  data() {\n    return {\n      selectedTrainerId: '',\n      // ID of the selected trainer\n      trainers: [] // List of trainers\n    };\n  },\n  methods: {\n    closePopup() {\n      this.$emit('close');\n    },\n    // Fetch trainers list from the backend\n    fetchTrainers() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        fetch('http://localhost:3000/users', {\n          method: 'GET',\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        }).then(response => response.json()).then(data => {\n          if (data.users) {\n            this.trainers = data.users; // Update the trainers list with the response\n          } else {\n            console.error('No trainers found in response');\n          }\n        }).catch(error => {\n          console.error('Error fetching trainers:', error);\n        });\n      }\n    },\n    // Add the selected trainer to the favorite trainers list\n    addFavoriteTrainer() {\n      const token = localStorage.getItem('token');\n      const trainerId = this.selectedTrainerId;\n      if (!trainerId) {\n        console.error('Trainer ID is required');\n        return; // Jangan kirim request jika trainer_id kosong\n      }\n\n      //console.log('Sending trainerId:', trainerId);  \n\n      if (trainerId && token) {\n        fetch('http://localhost:3000/favorite-trainers', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${token}`\n          },\n          body: JSON.stringify({\n            trainer_id: trainerId\n          })\n        }).then(response => response.json()).then(data => {\n          if (data.message) {\n            this.$emit('trainerAdded');\n            this.closePopup();\n          }\n        }).catch(error => {\n          console.error('Error adding favorite trainer:', error);\n        });\n      }\n    }\n  },\n  created() {\n    this.fetchTrainers(); // Fetch list of trainers when component is created\n  }\n};","map":{"version":3,"names":["name","props","isVisible","Boolean","data","selectedTrainerId","trainers","methods","closePopup","$emit","fetchTrainers","token","localStorage","getItem","fetch","method","headers","then","response","json","users","console","error","catch","addFavoriteTrainer","trainerId","body","JSON","stringify","trainer_id","message","created"],"sources":["/Users/hares/Downloads/vue-exp-8-sementara/client/src/components/AddFavoriteTrainer.vue"],"sourcesContent":["<template>\r\n  <div v-if=\"isVisible\" class=\"fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-50\">\r\n    <div class=\"bg-white p-6 rounded-lg custom-width\">\r\n      <h2 class=\"text-2xl font-semibold mb-4\">Add Favorite Trainer</h2>\r\n      <form @submit.prevent=\"addFavoriteTrainer\">\r\n        <div class=\"mb-4\">\r\n          <label for=\"trainer\" class=\"block text-lg\">Select Trainer:</label>\r\n          <select v-model=\"selectedTrainerId\" id=\"trainer\" class=\"border rounded p-2 w-full\">\r\n            <option disabled value=\"\">Choose a trainer</option>\r\n            <option v-for=\"trainer in trainers\" :key=\"trainer.id\" :value=\"trainer.id\">\r\n              {{ trainer.username }}\r\n            </option>\r\n          </select>\r\n        </div>\r\n        <div class=\"flex justify-end\">\r\n          <button type=\"button\" @click=\"closePopup\" class=\"bg-gray-500 text-white px-4 py-2 rounded mr-2\">Cancel</button>\r\n          <button type=\"submit\" class=\"bg-blue-500 text-white px-4 py-2 rounded\">Add Trainer</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'AddFavoriteTrainer',\r\n  props: {\r\n    isVisible: Boolean,\r\n  },\r\n  data() {\r\n    return {\r\n      selectedTrainerId: '',  // ID of the selected trainer\r\n      trainers: [],  // List of trainers\r\n    };\r\n  },\r\n  methods: {\r\n    closePopup() {\r\n      this.$emit('close');\r\n    },\r\n    // Fetch trainers list from the backend\r\n    fetchTrainers() {\r\n      const token = localStorage.getItem('token');\r\n      if (token) {\r\n        fetch('http://localhost:3000/users', {\r\n          method: 'GET',\r\n          headers: { 'Authorization': `Bearer ${token}` },\r\n        })\r\n          .then(response => response.json())\r\n          .then(data => {\r\n            if (data.users) {\r\n              this.trainers = data.users;  // Update the trainers list with the response\r\n            } else {\r\n              console.error('No trainers found in response');\r\n            }\r\n          })\r\n          .catch(error => {\r\n            console.error('Error fetching trainers:', error);\r\n          });\r\n      }\r\n    },\r\n    // Add the selected trainer to the favorite trainers list\r\n    addFavoriteTrainer() {\r\n  const token = localStorage.getItem('token');\r\n  const trainerId = this.selectedTrainerId;\r\n\r\n  if (!trainerId) {\r\n    console.error('Trainer ID is required');\r\n    return;  // Jangan kirim request jika trainer_id kosong\r\n  }\r\n\r\n  //console.log('Sending trainerId:', trainerId);  \r\n\r\n  if (trainerId && token) {\r\n    fetch('http://localhost:3000/favorite-trainers', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': `Bearer ${token}`,\r\n      },\r\n      body: JSON.stringify({ trainer_id: trainerId }),\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        if (data.message) {\r\n          this.$emit('trainerAdded');\r\n          this.closePopup();\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.error('Error adding favorite trainer:', error);\r\n      });\r\n  }\r\n},\r\n\r\n\r\n  },\r\n  created() {\r\n    this.fetchTrainers();  // Fetch list of trainers when component is created\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Custom width in percentage without using Tailwind classes */\r\n.custom-width {\r\n  width: 33.333%; \r\n}\r\n\r\n.fixed {\r\n  z-index: 9999;\r\n}\r\n.bg-opacity-50 {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n.bg-white {\r\n  background-color: white;\r\n}\r\n</style>\r\n"],"mappings":"AAwBA,eAAe;EACbA,IAAI,EAAE,oBAAoB;EAC1BC,KAAK,EAAE;IACLC,SAAS,EAAEC;EACb,CAAC;EACDC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,iBAAiB,EAAE,EAAE;MAAG;MACxBC,QAAQ,EAAE,EAAE,CAAG;IACjB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACPC,UAAUA,CAAA,EAAG;MACX,IAAI,CAACC,KAAK,CAAC,OAAO,CAAC;IACrB,CAAC;IACD;IACAC,aAAaA,CAAA,EAAG;MACd,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACTG,KAAK,CAAC,6BAA6B,EAAE;UACnCC,MAAM,EAAE,KAAK;UACbC,OAAO,EAAE;YAAE,eAAe,EAAE,UAAUL,KAAK;UAAG;QAChD,CAAC,EACEM,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACb,IAAG,IAAK;UACZ,IAAIA,IAAI,CAACgB,KAAK,EAAE;YACd,IAAI,CAACd,QAAO,GAAIF,IAAI,CAACgB,KAAK,EAAG;UAC/B,OAAO;YACLC,OAAO,CAACC,KAAK,CAAC,+BAA+B,CAAC;UAChD;QACF,CAAC,EACAC,KAAK,CAACD,KAAI,IAAK;UACdD,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;QAClD,CAAC,CAAC;MACN;IACF,CAAC;IACD;IACAE,kBAAkBA,CAAA,EAAG;MACvB,MAAMb,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMY,SAAQ,GAAI,IAAI,CAACpB,iBAAiB;MAExC,IAAI,CAACoB,SAAS,EAAE;QACdJ,OAAO,CAACC,KAAK,CAAC,wBAAwB,CAAC;QACvC,OAAM,CAAG;MACX;;MAEA;;MAEA,IAAIG,SAAQ,IAAKd,KAAK,EAAE;QACtBG,KAAK,CAAC,yCAAyC,EAAE;UAC/CC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAE,UAAUL,KAAK;UAClC,CAAC;UACDe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,UAAU,EAAEJ;UAAU,CAAC;QAChD,CAAC,EACER,IAAI,CAACC,QAAO,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,EAChCF,IAAI,CAACb,IAAG,IAAK;UACZ,IAAIA,IAAI,CAAC0B,OAAO,EAAE;YAChB,IAAI,CAACrB,KAAK,CAAC,cAAc,CAAC;YAC1B,IAAI,CAACD,UAAU,CAAC,CAAC;UACnB;QACF,CAAC,EACAe,KAAK,CAACD,KAAI,IAAK;UACdD,OAAO,CAACC,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;QACxD,CAAC,CAAC;MACN;IACF;EAGE,CAAC;EACDS,OAAOA,CAAA,EAAG;IACR,IAAI,CAACrB,aAAa,CAAC,CAAC,EAAG;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}